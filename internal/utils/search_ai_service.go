package utils

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"strings"
	"bytes"
	"net/http"
	"unicode"
	"time"
	"io"
	"bufio"

	"github.com/google/generative-ai-go/genai"
	"google.golang.org/api/option"
)

type SearchAnalysis struct {
	Job                string `json:"job"`
	Municipality       string `json:"municipality"`
	RequiresExperience *bool  `json:"requiresExperience"`
}

// normalizeString normaliserar en str√§ng f√∂r j√§mf√∂relse
func normalizeString(s string) string {
	// Konvertera till lowercase
	s = strings.ToLower(s)
	
	// Ers√§tt svenska tecken
	replacements := map[string]string{
		"√•": "a",
		"√§": "a",
		"√∂": "o",
		"√©": "e",
		"√®": "e",
		"√´": "e",
		"√º": "u",
	}
	
	for old, new := range replacements {
		s = strings.ReplaceAll(s, old, new)
	}
	
	// Beh√•ll bara bokst√§ver och siffror
	var result strings.Builder
	for _, r := range s {
		if unicode.IsLetter(r) || unicode.IsNumber(r) {
			result.WriteRune(r)
		}
	}
	
	return result.String()
}

func AnalyzeSearchQuery(query string) (*SearchAnalysis, error) {
	log.Printf("\n=== Analyserar s√∂kfr√•ga: %s ===\n", query)

	// F√∂rs√∂k med Hugging Face f√∂rst
	result, err := tryHuggingFace(query)
	if err != nil {
		log.Printf("Hugging Face misslyckades: %v, f√∂rs√∂ker med Gemini ist√§llet", err)
		return tryGemini(query)
	}

	// Om HF returnerade ett resultat med alla f√§lt som null, anv√§nd Gemini
	if result != nil && result.Job == "" && result.Municipality == "" && result.RequiresExperience == nil {
		log.Printf("Hugging Face returnerade null-v√§rden, f√∂rs√∂ker med Gemini ist√§llet")
		return tryGemini(query)
	}

	// Om job √§r tomt men vi har andra v√§rden, s√§tt det till "jobb"
	if result != nil && result.Job == "" && (result.Municipality != "" || result.RequiresExperience != nil) {
		result.Job = "jobb"
	}

	return result, nil
}

func tryHuggingFace(query string) (*SearchAnalysis, error) {
	apiKey := getAPIKey(HuggingfaceProvider)
	if apiKey == "" {
		return nil, fmt.Errorf("ingen Huggingface API-nyckel tillg√§nglig")
	}

	url := "https://api-inference.huggingface.co/v1/chat/completions"

	log.Printf("üîç Skickar f√∂rfr√•gan till HF API med query: %s", query)

	promptText := fmt.Sprintf(`dessa √§r lista p√• st√§der som du ska plocka staden eller kommunen utifr√•n kundens fr√•ga [
  ["Blekinge l√§n", "Karlshamn", "Karlskrona", "Olofstr√∂m", "Ronneby", "S√∂lvesborg", "Dalarnas l√§n", "Avesta", "Borl√§nge", "Falun", "Gagnef", "Hedemora", "Leksand", "Ludvika", "Malung-S√§len", "Mora", "Orsa", "R√§ttvik", "Smedjebacken", "S√§ter"],
  ["Vansbro", "√Ñlvdalen", "Gotlands l√§n", "Gotland", "G√§vleborgs l√§n", "Bolln√§s", "G√§vle", "Hofors", "Hudiksvall", "Ljusdal", "Nordanstig", "Ockelbo", "Ovan√•ker", "Sandviken", "S√∂derhamn", "Hallands l√§n", "Falkenberg", "Halmstad", "Hylte", "Kungsbacka"],
  ["Laholm", "Varberg", "J√§mtlands l√§n", "Berg", "Br√§cke", "H√§rjedalen", "Krokom", "Ragunda", "Str√∂msund", "√Öre", "√ñstersund", "J√∂nk√∂pings l√§n", "Aneby", "Eksj√∂", "Gislaved", "Gnosj√∂", "Habo", "J√∂nk√∂ping", "Mullsj√∂", "N√§ssj√∂"],
  ["S√§vsj√∂", "Tran√•s", "Vaggeryd", "Vetlanda", "V√§rnamo", "Kalmar l√§n", "Borgholm", "Emmaboda", "Hultsfred", "H√∂gsby", "Kalmar", "M√∂nster√•s", "M√∂rbyl√•nga", "Nybro", "Oskarshamn", "Tors√•s", "Vimmerby", "V√§stervik", "Kronobergs l√§n", "Alvesta"],
  ["Lessebo", "Ljungby", "Markaryd", "Tingsryd", "Uppvidinge", "V√§xj√∂", "√Ñlmhult", "Norrbottens l√§n", "Arjeplog", "Arvidsjaur", "Boden", "G√§llivare", "Haparanda", "Jokkmokk", "Kalix", "Kiruna", "Lule√•", "Pajala", "Pite√•", "√Ñlvsbyn"],
  ["√ñverkalix", "√ñvertorne√•", "Sk√•ne l√§n", "Bjuv", "Brom√∂lla", "Burl√∂v", "B√•stad", "Esl√∂v", "Helsingborg", "H√§ssleholm", "H√∂gan√§s", "H√∂rby", "H√∂√∂r", "Klippan", "Kristianstad", "K√§vlinge", "Landskrona", "Lomma", "Lund", "Malm√∂"],
  ["Osby", "Perstorp", "Simrishamn", "Sj√∂bo", "Skurup", "Staffanstorp", "Sval√∂v", "Svedala", "Tomelilla", "Trelleborg", "Vellinge", "Ystad", "√Ñngelholm", "√Östorp", "√ñrkelljunga", "√ñstra G√∂inge", "Stockholms l√§n", "Botkyrka", "Danderyd", "Eker√∂"],
  ["Haninge", "Huddinge", "J√§rf√§lla", "Liding√∂", "Nacka", "Norrt√§lje", "Nykvarn", "Nyn√§shamn", "Salem", "Sigtuna", "Sollentuna", "Solna", "Stockholm", "Sundbyberg", "S√∂dert√§lje", "Tyres√∂", "T√§by", "Upplands V√§sby", "Upplands-Bro", "Vallentuna"],
  ["Vaxholm", "V√§rmd√∂", "√ñster√•ker", "S√∂dermanlands l√§n", "Eskilstuna", "Flen", "Gnesta", "Katrineholm", "Nyk√∂ping", "Oxel√∂sund", "Str√§ngn√§s", "Trosa", "Ving√•ker", "Uppsala l√§n", "Enk√∂ping", "Heby", "H√•bo", "Knivsta", "Tierp", "Uppsala"],
  ["√Ñlvkarleby", "√ñsthammar", "V√§rmlands l√§n", "Arvika", "Eda", "Filipstad", "Forshaga", "Grums", "Hagfors", "Hammar√∂", "Karlstad", "Kil", "Kristinehamn", "Munkfors", "Storfors", "Sunne", "S√§ffle", "Torsby", "√Örj√§ng", "V√§sterbottens l√§n"],
  ["Bjurholm", "Dorotea", "Lycksele", "Mal√•", "Nordmaling", "Norsj√∂", "Robertsfors", "Skellefte√•", "Sorsele", "Storuman", "Ume√•", "Vilhelmina", "Vindeln", "V√§nn√§s", "√Ösele", "V√§sternorrlands l√§n", "H√§rn√∂sand", "Kramfors", "Sollefte√•", "Sundsvall"],
  ["Timr√•", "√Önge", "√ñrnsk√∂ldsvik", "V√§stmanlands l√§n", "Arboga", "Fagersta", "Hallstahammar", "Kungs√∂r", "K√∂ping", "Norberg", "Sala", "Skinnskatteberg", "Surahammar", "V√§ster√•s", "V√§stra G√∂talands l√§n", "Ale", "Alings√•s", "Bengtsfors", "Bollebygd"],
  ["Bor√•s", "Dals-Ed", "Essunga", "Falk√∂ping", "F√§rgelanda", "Gr√§storp", "Gullsp√•ng", "G√∂teborg", "G√∂tene", "Herrljunga", "Hjo", "H√§rryda", "Karlsborg", "Kung√§lv", "Lerum", "Lidk√∂ping", "Lilla Edet", "Lysekil", "Mariestad", "Mark"],
  ["Mellerud", "Munkedal", "M√∂lndal", "Orust", "Partille", "Skara", "Sk√∂vde", "Soten√§s", "Stenungsund", "Str√∂mstad", "Svenljunga", "Tanum", "Tibro", "Tidaholm", "Tj√∂rn", "Tranemo", "Trollh√§ttan", "T√∂reboda", "Uddevalla", "Ulricehamn"],
  ["Vara", "V√§nersborg", "V√•rg√•rda", "√Öm√•l", "√ñcker√∂", "√ñrebro l√§n", "Askersund", "Degerfors", "Hallsberg", "H√§llefors", "Karlskoga", "Kumla", "Lax√•", "Lekeberg", "Lindesberg", "Ljusnarsberg", "Nora", "√ñrebro", "√ñsterg√∂tlands l√§n", "Boxholm"],
  ["Finsp√•ng", "Kinda", "Link√∂ping", "Mj√∂lby", "Motala", "Norrk√∂ping", "S√∂derk√∂ping", "Vadstena", "Valdemarsvik", "Ydre", "√Ötvidaberg", "√ñdesh√∂g"]
]

VIKTIGT: Om anv√§ndaren n√§mner ett l√§n (t.ex. "g√§vleborg", "g√§vleborgs l√§n"), returnera ALLTID l√§nets fullst√§ndiga namn (t.ex. "G√§vleborgs l√§n") i municipality-f√§ltet, inte en stad i l√§net.

Analysera f√∂ljande jobbs√∂kningsfr√•ga och extrahera information.
Om personen specifikt n√§mner att de s√∂ker jobb utan erfarenhetskrav eller entry-level/junior-positioner, s√§tt requiresExperience till false.
Om personen specifikt s√∂ker senior-positioner eller jobb som kr√§ver erfarenhet, s√§tt requiresExperience till true.
Om personen inte n√§mner n√•got om erfarenhet, s√§tt requiresExperience till null.

Returnera ENDAST ett JSON-objekt med f√∂ljande struktur:
{
    "job": "extraherad jobbtitel",
    "municipality": "extraherad kommun/l√§n (anv√§nd exakt namn fr√•n listan)",
    "requiresExperience": false/true/null (baserat p√• erfarenhetskrav)
}

Exempel:
- Om anv√§ndaren skriver "jobb i g√§vleborg" -> municipality: "G√§vleborgs l√§n"
- Om anv√§ndaren skriver "jobb i g√§vle" -> municipality: "G√§vle"

S√∂kfr√•ga: %s`, query)

	// Skapa request body
	requestBody := map[string]interface{}{
		"model": "meta-llama/Llama-3.2-3B-Instruct",
		"messages": []map[string]string{
			{
				"role":    "user",
				"content": promptText,
			},
		},
		"temperature": 0.3,
		"max_tokens": 2048,
		"top_p": 0.7,
		"stream": true,
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return nil, fmt.Errorf("kunde inte skapa request body: %v", err)
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", "Bearer "+apiKey)
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{
		Timeout: 30 * time.Second,
	}
	
	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("HF API anrop misslyckades: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		log.Printf("‚ùå HF API fel status %d\nHeaders: %v\nBody: %s", resp.StatusCode, resp.Header, string(body))
		return nil, fmt.Errorf("HF API returnerade status %d: %s", resp.StatusCode, string(body))
	}

	log.Printf("‚úÖ HF API status: %d", resp.StatusCode)

	// Hantera streaming response
	var fullResponse bytes.Buffer
	scanner := bufio.NewScanner(resp.Body)
	for scanner.Scan() {
		line := scanner.Text()
		if strings.HasPrefix(line, "data: ") {
			data := strings.TrimPrefix(line, "data: ")
			if data == "[DONE]" {
				break
			}
			var streamResponse HFStreamResponse
			if err := json.Unmarshal([]byte(data), &streamResponse); err != nil {
				continue
			}

			if len(streamResponse.Choices) > 0 {
				content := streamResponse.Choices[0].Delta.Content
				fullResponse.WriteString(content)
			}
		}
	}

	if err := scanner.Err(); err != nil {
		log.Printf("‚ùå Fel vid l√§sning av stream: %v", err)
		return nil, fmt.Errorf("fel vid l√§sning av stream: %v", err)
	}

	// Extrahera JSON fr√•n svaret
	responseStr := fullResponse.String()
	startIdx := strings.Index(responseStr, "{")
	endIdx := strings.LastIndex(responseStr, "}")
	
	if startIdx == -1 || endIdx == -1 {
		return nil, fmt.Errorf("kunde inte hitta JSON i svaret: %s", responseStr)
	}

	jsonStr := responseStr[startIdx : endIdx+1]
	log.Printf("üì• Extraherat JSON-svar: %s", jsonStr)

	var result *SearchAnalysis
	if err := json.Unmarshal([]byte(jsonStr), &result); err != nil {
		return nil, fmt.Errorf("kunde inte unmarshalla svar: %v", err)
	}

	return result, nil
}

func tryGemini(query string) (*SearchAnalysis, error) {
	ctx := context.Background()

	client, err := genai.NewClient(ctx, option.WithAPIKey(getAPIKey(GeminiProvider)))
	if err != nil {
		return nil, fmt.Errorf("kunde inte skapa Gemini-klient: %v", err)
	}
	defer client.Close()

	model := client.GenerativeModel("gemini-1.5-flash-8b")
	model.SetTemperature(0.2)
	model.SetTopK(40)
	model.SetTopP(0.95)

	promptText := fmt.Sprintf(`dessa √§r lista p√• st√§der som du ska plocka staden eller kommunen utifr√•n kundens fr√•ga [
  ["Blekinge l√§n", "Karlshamn", "Karlskrona", "Olofstr√∂m", "Ronneby", "S√∂lvesborg", "Dalarnas l√§n", "Avesta", "Borl√§nge", "Falun", "Gagnef", "Hedemora", "Leksand", "Ludvika", "Malung-S√§len", "Mora", "Orsa", "R√§ttvik", "Smedjebacken", "S√§ter"],
  ["Vansbro", "√Ñlvdalen", "Gotlands l√§n", "Gotland", "G√§vleborgs l√§n", "Bolln√§s", "G√§vle", "Hofors", "Hudiksvall", "Ljusdal", "Nordanstig", "Ockelbo", "Ovan√•ker", "Sandviken", "S√∂derhamn", "Hallands l√§n", "Falkenberg", "Halmstad", "Hylte", "Kungsbacka"],
  ["Laholm", "Varberg", "J√§mtlands l√§n", "Berg", "Br√§cke", "H√§rjedalen", "Krokom", "Ragunda", "Str√∂msund", "√Öre", "√ñstersund", "J√∂nk√∂pings l√§n", "Aneby", "Eksj√∂", "Gislaved", "Gnosj√∂", "Habo", "J√∂nk√∂ping", "Mullsj√∂", "N√§ssj√∂"],
  ["S√§vsj√∂", "Tran√•s", "Vaggeryd", "Vetlanda", "V√§rnamo", "Kalmar l√§n", "Borgholm", "Emmaboda", "Hultsfred", "H√∂gsby", "Kalmar", "M√∂nster√•s", "M√∂rbyl√•nga", "Nybro", "Oskarshamn", "Tors√•s", "Vimmerby", "V√§stervik", "Kronobergs l√§n", "Alvesta"],
  ["Lessebo", "Ljungby", "Markaryd", "Tingsryd", "Uppvidinge", "V√§xj√∂", "√Ñlmhult", "Norrbottens l√§n", "Arjeplog", "Arvidsjaur", "Boden", "G√§llivare", "Haparanda", "Jokkmokk", "Kalix", "Kiruna", "Lule√•", "Pajala", "Pite√•", "√Ñlvsbyn"],
  ["√ñverkalix", "√ñvertorne√•", "Sk√•ne l√§n", "Bjuv", "Brom√∂lla", "Burl√∂v", "B√•stad", "Esl√∂v", "Helsingborg", "H√§ssleholm", "H√∂gan√§s", "H√∂rby", "H√∂√∂r", "Klippan", "Kristianstad", "K√§vlinge", "Landskrona", "Lomma", "Lund", "Malm√∂"],
  ["Osby", "Perstorp", "Simrishamn", "Sj√∂bo", "Skurup", "Staffanstorp", "Sval√∂v", "Svedala", "Tomelilla", "Trelleborg", "Vellinge", "Ystad", "√Ñngelholm", "√Östorp", "√ñrkelljunga", "√ñstra G√∂inge", "Stockholms l√§n", "Botkyrka", "Danderyd", "Eker√∂"],
  ["Haninge", "Huddinge", "J√§rf√§lla", "Liding√∂", "Nacka", "Norrt√§lje", "Nykvarn", "Nyn√§shamn", "Salem", "Sigtuna", "Sollentuna", "Solna", "Stockholm", "Sundbyberg", "S√∂dert√§lje", "Tyres√∂", "T√§by", "Upplands V√§sby", "Upplands-Bro", "Vallentuna"],
  ["Vaxholm", "V√§rmd√∂", "√ñster√•ker", "S√∂dermanlands l√§n", "Eskilstuna", "Flen", "Gnesta", "Katrineholm", "Nyk√∂ping", "Oxel√∂sund", "Str√§ngn√§s", "Trosa", "Ving√•ker", "Uppsala l√§n", "Enk√∂ping", "Heby", "H√•bo", "Knivsta", "Tierp", "Uppsala"],
  ["√Ñlvkarleby", "√ñsthammar", "V√§rmlands l√§n", "Arvika", "Eda", "Filipstad", "Forshaga", "Grums", "Hagfors", "Hammar√∂", "Karlstad", "Kil", "Kristinehamn", "Munkfors", "Storfors", "Sunne", "S√§ffle", "Torsby", "√Örj√§ng", "V√§sterbottens l√§n"],
  ["Bjurholm", "Dorotea", "Lycksele", "Mal√•", "Nordmaling", "Norsj√∂", "Robertsfors", "Skellefte√•", "Sorsele", "Storuman", "Ume√•", "Vilhelmina", "Vindeln", "V√§nn√§s", "√Ösele", "V√§sternorrlands l√§n", "H√§rn√∂sand", "Kramfors", "Sollefte√•", "Sundsvall"],
  ["Timr√•", "√Önge", "√ñrnsk√∂ldsvik", "V√§stmanlands l√§n", "Arboga", "Fagersta", "Hallstahammar", "Kungs√∂r", "K√∂ping", "Norberg", "Sala", "Skinnskatteberg", "Surahammar", "V√§ster√•s", "V√§stra G√∂talands l√§n", "Ale", "Alings√•s", "Bengtsfors", "Bollebygd"],
  ["Bor√•s", "Dals-Ed", "Essunga", "Falk√∂ping", "F√§rgelanda", "Gr√§storp", "Gullsp√•ng", "G√∂teborg", "G√∂tene", "Herrljunga", "Hjo", "H√§rryda", "Karlsborg", "Kung√§lv", "Lerum", "Lidk√∂ping", "Lilla Edet", "Lysekil", "Mariestad", "Mark"],
  ["Mellerud", "Munkedal", "M√∂lndal", "Orust", "Partille", "Skara", "Sk√∂vde", "Soten√§s", "Stenungsund", "Str√∂mstad", "Svenljunga", "Tanum", "Tibro", "Tidaholm", "Tj√∂rn", "Tranemo", "Trollh√§ttan", "T√∂reboda", "Uddevalla", "Ulricehamn"],
  ["Vara", "V√§nersborg", "V√•rg√•rda", "√Öm√•l", "√ñcker√∂", "√ñrebro l√§n", "Askersund", "Degerfors", "Hallsberg", "H√§llefors", "Karlskoga", "Kumla", "Lax√•", "Lekeberg", "Lindesberg", "Ljusnarsberg", "Nora", "√ñrebro", "√ñsterg√∂tlands l√§n", "Boxholm"],
  ["Finsp√•ng", "Kinda", "Link√∂ping", "Mj√∂lby", "Motala", "Norrk√∂ping", "S√∂derk√∂ping", "Vadstena", "Valdemarsvik", "Ydre", "√Ötvidaberg", "√ñdesh√∂g"]
]

VIKTIGT: Om anv√§ndaren n√§mner ett l√§n (t.ex. "g√§vleborg", "g√§vleborgs l√§n"), returnera ALLTID l√§nets fullst√§ndiga namn (t.ex. "G√§vleborgs l√§n") i municipality-f√§ltet, inte en stad i l√§net.
F√∂rs√∂k att √∂vers√§tta till svenska spr√•k fr√•n kundens fr√•ga fr√•n stad till yrke. Alltid p√• svenska.
Analysera f√∂ljande jobbs√∂kningsfr√•ga och extrahera information.
Om personen specifikt n√§mner att de s√∂ker jobb utan erfarenhetskrav eller entry-level/junior-positioner, s√§tt requiresExperience till false.
Om personen specifikt s√∂ker senior-positioner eller jobb som kr√§ver erfarenhet, s√§tt requiresExperience till true.
Om personen inte n√§mner n√•got om erfarenhet, s√§tt requiresExperience till null.

Returnera ENDAST ett JSON-objekt med f√∂ljande struktur:
{
    "job": "extraherad jobbtitel",
    "municipality": "extraherad kommun/l√§n (anv√§nd exakt namn fr√•n listan)",
    "requiresExperience": false/true/null (baserat p√• erfarenhetskrav)
}

Exempel:
- Om anv√§ndaren skriver "jobb i g√§vleborg" -> municipality: "G√§vleborgs l√§n"
- Om anv√§ndaren skriver "jobb i g√§vle" -> municipality: "G√§vle"

S√∂kfr√•ga: %s`, query)

	log.Printf("\nSkickar prompt till Gemini:\n%s\n", promptText)

	resp, err := model.GenerateContent(ctx, genai.Text(promptText))
	if err != nil {
		return nil, fmt.Errorf("Gemini generering misslyckades: %v", err)
	}

	if len(resp.Candidates) == 0 {
		return nil, fmt.Errorf("inget svar fr√•n Gemini")
	}

	var aiResponse string
	for _, part := range resp.Candidates[0].Content.Parts {
		aiResponse += fmt.Sprintf("%v", part)
	}

	log.Printf("\nGemini-svar:\n%s\n", aiResponse)

	// Extrahera JSON fr√•n svaret
	var cleanedJSON string
	if jsonStart := strings.Index(aiResponse, "{"); jsonStart != -1 {
		if jsonEnd := strings.LastIndex(aiResponse, "}"); jsonEnd != -1 {
			cleanedJSON = aiResponse[jsonStart : jsonEnd+1]
		}
	}

	if cleanedJSON == "" {
		return nil, fmt.Errorf("kunde inte extrahera JSON fr√•n Gemini-svar")
	}

	var result SearchAnalysis
	if err := json.Unmarshal([]byte(cleanedJSON), &result); err != nil {
		return nil, fmt.Errorf("kunde inte parsa Gemini-svar: %v", err)
	}

	if result.Job == "" {
		return nil, fmt.Errorf("kunde inte identifiera jobb fr√•n Gemini-svar")
	}

	log.Printf("\nGemini extraherad information:\nJobb: %s\nKommun: %s\nErfarenhetskrav: %v\n", 
		result.Job, result.Municipality, result.RequiresExperience)

	return &result, nil
}
